"""
Kurt configuration management.

Loads configuration from .kurt file in the current directory.
This file stores project-specific settings like database path and project root.
"""

from pathlib import Path
from typing import Optional

from pydantic import BaseModel, Field, field_validator


class KurtConfig(BaseModel):
    """Kurt project configuration."""

    KURT_PROJECT_PATH: str = Field(
        default=".",
        description="Path to the Kurt project root"
    )
    KURT_DB: str = Field(
        default=".kurt/kurt.sqlite",
        description="Path to the SQLite database file (relative to project path)"
    )
    source_path: str = Field(
        default="sources",
        description="Path to store fetched content (relative to project path)"
    )
    LLM_MODEL_DOC_PROCESSING: str = Field(
        default="openai/gpt-4o-mini",
        description="LLM model for document processing (metadata extraction, classification)"
    )

    @field_validator("KURT_PROJECT_PATH")
    @classmethod
    def validate_project_path(cls, v: str) -> str:
        """Ensure project path exists."""
        path = Path(v).resolve()
        if not path.exists():
            raise ValueError(f"Project path does not exist: {path}")
        return str(path)

    def get_absolute_db_path(self) -> Path:
        """Get absolute path to database file."""
        project_path = Path(self.KURT_PROJECT_PATH).resolve()
        db_path = Path(self.KURT_DB)

        # If DB path is relative, resolve it relative to project path
        if not db_path.is_absolute():
            return project_path / db_path
        return db_path

    def get_db_directory(self) -> Path:
        """Get the .kurt directory path."""
        return self.get_absolute_db_path().parent

    def get_absolute_source_path(self) -> Path:
        """Get absolute path to source content directory."""
        project_path = Path(self.KURT_PROJECT_PATH).resolve()
        source_path = Path(self.source_path)

        # If source path is relative, resolve it relative to project path
        if not source_path.is_absolute():
            return project_path / source_path
        return source_path


def get_config_file_path() -> Path:
    """Get the path to the kurt configuration file."""
    return Path.cwd() / "kurt.config"


def load_config() -> KurtConfig:
    """
    Load Kurt configuration from kurt.config file in current directory.

    The kurt.config file should contain key=value pairs:

    KURT_PROJECT_PATH=.
    KURT_DB=.kurt/kurt.sqlite
    source_path=sources

    Returns:
        KurtConfig with loaded settings

    Raises:
        FileNotFoundError: If kurt.config file doesn't exist
        ValueError: If configuration is invalid
    """
    config_file = get_config_file_path()

    if not config_file.exists():
        raise FileNotFoundError(
            f"Kurt configuration file not found: {config_file}\n"
            "Run 'kurt init' to initialize a Kurt project."
        )

    # Parse config file
    config_data = {}
    with open(config_file, 'r') as f:
        for line in f:
            line = line.strip()
            # Skip empty lines and comments
            if not line or line.startswith('#'):
                continue

            # Parse key=value
            if '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")  # Remove quotes
                config_data[key] = value

    return KurtConfig(**config_data)


def create_config(
    project_path: str = ".",
    db_path: str = ".kurt/kurt.sqlite",
    source_path: str = "sources"
) -> KurtConfig:
    """
    Create a new kurt.config configuration file.

    Args:
        project_path: Path to the Kurt project root
        db_path: Path to the SQLite database (relative to project_path)
        source_path: Path to store fetched content (relative to project_path)

    Returns:
        KurtConfig instance
    """
    config = KurtConfig(
        KURT_PROJECT_PATH=project_path,
        KURT_DB=db_path,
        source_path=source_path
    )

    config_file = get_config_file_path()

    # Ensure parent directory exists (though it should be cwd)
    config_file.parent.mkdir(parents=True, exist_ok=True)

    # Write config file
    with open(config_file, 'w') as f:
        f.write("# Kurt Project Configuration\n")
        f.write("# This file is auto-generated by 'kurt init'\n\n")
        f.write(f'KURT_PROJECT_PATH="{config.KURT_PROJECT_PATH}"\n')
        f.write(f'KURT_DB="{config.KURT_DB}"\n')
        f.write(f'source_path="{config.source_path}"\n')
        f.write(f'LLM_MODEL_DOC_PROCESSING="{config.LLM_MODEL_DOC_PROCESSING}"\n')

    return config


def config_exists() -> bool:
    """Check if kurt.config configuration file exists."""
    return get_config_file_path().exists()


def get_config_or_default() -> KurtConfig:
    """
    Get configuration, or return default if kurt.config file doesn't exist.

    Returns:
        KurtConfig with loaded or default settings
    """
    if config_exists():
        return load_config()
    else:
        # Return default config (without creating file)
        return KurtConfig()
